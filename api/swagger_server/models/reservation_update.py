# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ReservationUpdate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, status: str=None, additional_info: str=None):  # noqa: E501
        """ReservationUpdate - a model defined in Swagger

        :param status: The status of this ReservationUpdate.  # noqa: E501
        :type status: str
        :param additional_info: The additional_info of this ReservationUpdate.  # noqa: E501
        :type additional_info: str
        """
        self.swagger_types = {
            'status': str,
            'additional_info': str
        }

        self.attribute_map = {
            'status': 'status',
            'additional_info': 'additional_info'
        }
        self._status = status
        self._additional_info = additional_info

    @classmethod
    def from_dict(cls, dikt) -> 'ReservationUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReservationUpdate of this ReservationUpdate.  # noqa: E501
        :rtype: ReservationUpdate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> str:
        """Gets the status of this ReservationUpdate.


        :return: The status of this ReservationUpdate.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ReservationUpdate.


        :param status: The status of this ReservationUpdate.
        :type status: str
        """
        allowed_values = ["confirmed", "altered", "purchased"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def additional_info(self) -> str:
        """Gets the additional_info of this ReservationUpdate.


        :return: The additional_info of this ReservationUpdate.
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info: str):
        """Sets the additional_info of this ReservationUpdate.


        :param additional_info: The additional_info of this ReservationUpdate.
        :type additional_info: str
        """

        self._additional_info = additional_info
