# name: Deploy to Lambda

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: 3.13

#       - name: Install dependencies
#         run: |
#           if [ -f requirements.txt ]; then
#             pip install -r requirements.txt -t src
#           fi
      
#       - name: Package code
#         run: cd src && zip -r function.zip .

#       - name: Deploy to Lambda
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
#         run: |
#           aws lambda update-function-code --function-name hello_world --zip-file fileb://src/function.zip
      
#       - name: Update Lambda function configuration (set handler)
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
#         run: |
#           aws lambda update-function-configuration --function-name hello_world --handler main.lambda_handler
name: Deploy Lambda Container

on:
  push:
    branches:
      - main  # or your deployment branch

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    env:
      ECR_REPOSITORY: alltimegreat/inventory-management
      IMAGE_TAG: latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Docker Image
        run: |
          IMAGE_URI="${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          echo "Building image: $IMAGE_URI"
          docker build -f src/Dockerfile -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"

      - name: Update Lambda Function Code
        run: |
          IMAGE_URI="${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          echo "Updating Lambda with image: $IMAGE_URI"
          aws lambda update-function-code \
            --function-name app \
            --image-uri "$IMAGE_URI"
